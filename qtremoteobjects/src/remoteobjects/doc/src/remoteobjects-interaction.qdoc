/****************************************************************************
**
** Copyright (C) 2014 Ford Motor Company
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtRemoteObjects module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtremoteobjects-interaction.html
\brief Describes how source/replica interaction works.
\section1 Remote Object Interaction

Source/replica interaction is directional. Property changes and signal emission
happen on the source, and are propagated to all replicas. If a property is
writable, you can call the setter function on a replica. This will be forwarded
to the source, and if a change is made, it will be made on the source and
subsequently forwarded to all replicas. To the replica, it is then an
asynchronous call, with latency before the change takes effect.

Whereas you can emit a signal on a replica, this may have unexpected results and
is discouraged for that reason. It will only trigger slots connected to the
replica itself, no slots connected to the source or other replicas. Like
property setters, slot invocations on a replica are forwarded to the Source to
run.

The behavior above is implemented automatically by QtRO, there is no need to
write any replica implementation code. It will be handled automatically at
runtime for dynamic replicas, or at compile time for repc generated headers.
*/
